package cash_credits;

import com.ftn.sbnz.tim5.model.Client;
import com.ftn.sbnz.tim5.model.ClientWarning;
import com.ftn.sbnz.tim5.model.Debit;
import com.ftn.sbnz.tim5.model.Account;
import com.ftn.sbnz.tim5.model.AccountType;
import com.ftn.sbnz.tim5.model.enums.Status;
import com.ftn.sbnz.tim5.model.enums.WarningType;
import java.time.LocalDateTime;
import java.util.Date;
import java.time.temporal.ChronoUnit;


rule "get money for debits, don't have money"
    agenda-group "get-money"
    when
        $c: Client($account: account)
        $a: Account(id == $account.id, $accountType: accountType)
        $sumOfMonthlyAmount: Double() from accumulate(
                $debit: Debit(debitStatus == Status.ACTIVE) from $a.debits,
                sum($debit.getMonthlyAmount())
        )
        eval($a.getTotalBalance() - $sumOfMonthlyAmount < 0)
    then
        modify($c){
            getWarnings().add(new ClientWarning(new Date(), WarningType.CASH_CREDIT_WARNING))
        }
        modify($a){
            setTotalBalance($a.getTotalBalance() - $sumOfMonthlyAmount)
        }

        System.out.println("get money for debits, don't have money"+ $c.getId());
end

rule "get money for debits, have money"
    agenda-group "get-money"
    when
        $c: Client($account: account)
        $a: Account(id == $account.id)
        $sumOfMonthlyAmount: Double() from accumulate(
                $debit: Debit(debitStatus == Status.ACTIVE) from $a.debits,
                sum($debit.getMonthlyAmount())
        )
        eval($a.getTotalBalance() - $sumOfMonthlyAmount >= 0)
    then
        modify($a){
            setTotalBalance($a.getTotalBalance() - $sumOfMonthlyAmount)
        }
        System.out.println("get money for debits, have money"+ $c.getId());
end

rule "get money for monthly subscription, don't have money"
    agenda-group "get-money"
    when
        $c: Client($account: account)
        $a: Account(id == $account.id,$accountType: accountType)
        $at: AccountType(id == $accountType.id)
        eval($a.getTotalBalance() - $at.getMonthlySubscription() < 0)
    then
        modify($c){
            getWarnings().add(new ClientWarning(new Date(), WarningType.MAINTENANCE_WARNING))
        }
        modify($a){
            setTotalBalance($a.getTotalBalance() - $at.getMonthlySubscription())
        }
        System.out.println("get money for monthly subscription, don't have money"+ $c.getId());
end

rule "get money for monthly subscription, have money"
    agenda-group "get-money"
    when
        $c: Client($account: account)
        $a: Account(id == $account.id,$accountType: accountType)
        $at: AccountType(id == $accountType.id)
        eval($a.getTotalBalance() - $at.getMonthlySubscription() >= 0)
    then
        modify($a){
            setTotalBalance($a.getTotalBalance() - $at.getMonthlySubscription())
        }
        System.out.println("get money for monthly subscription, have money" + $c.getId());
end







