package cash_credits;

import com.ftn.sbnz.tim5.model.Client;
import com.ftn.sbnz.tim5.model.Debit;
import com.ftn.sbnz.tim5.model.Account;
import com.ftn.sbnz.tim5.model.AccountType;
import com.ftn.sbnz.tim5.model.enums.Status
import java.time.LocalDateTime;

rule "get money for debits and monthlySubscription, don't have money"
    agenda-group "get-money"
    when
        $c: Client($account: account)
        $a: Account(id == $account.id, $accountType: accountType)
        $sumOfMonthlyAmount: Double() from accumulate(
                $debit: Debit(debitStatus == Status.ACTIVE) from $a.debits,
                sum($debit.getMonthlyAmount())
        )
        eval($a.getTotalBalance() - $sumOfMonthlyAmount < 0)
    then
        modify($c){
            setDebitAttentionCounter($c.getDebitAttentionCounter()+1)
        }
        modify($a){
            setTotalBalance($a.getTotalBalance() - $sumOfMonthlyAmount)
        }
end

rule "get money for debits, have money"
    agenda-group "get-money"
    when
        $c: Client($account: account)
        $a: Account(id == $account.id)
        $sumOfMonthlyAmount: Double() from accumulate(
                $debit: Debit(debitStatus == Status.ACTIVE) from $a.debits,
                sum($debit.getMonthlyAmount())
        )
        eval($a.getTotalBalance() - $sumOfMonthlyAmount >= 0)
    then
        modify($a){
            setTotalBalance($a.getTotalBalance() - $sumOfMonthlyAmount)
        }
end

rule "get money for monthly subscription, don't have money"
    agenda-group "get-money"
    when
        $c: Client($account: account)
        $a: Account(id == $account.id,$accountType: accountType)
        $at: AccountType(id == $accountType.id)
        eval($a.getTotalBalance() - $at.getMonthlySubscription() < 0)
    then
        modify($c){
            setAccountAttentionCounter($c.getAccountAttentionCounter()+1)
        }
        modify($a){
            setTotalBalance($a.getTotalBalance() - $at.getMonthlySubscription())
        }
end

rule "get money for monthly subscription, have money"
    agenda-group "get-money"
    when
        $c: Client($account: account)
        $a: Account(id == $account.id,$accountType: accountType)
        $at: AccountType(id == $accountType.id)
        eval($a.getTotalBalance() - $at.getMonthlySubscription() >= 0)
    then
        modify($a){
            setTotalBalance($a.getTotalBalance() - $at.getMonthlySubscription())
        }
end


rule "get one penalty for account attentions"
    when
        $c: Client(accountAttentionCounter >= 5)
    then
        modify($c){
            setPenaltyCounter($c.getPenaltyCounter() + 1),
            setAccountAttentionCounter(0)
        }
end

rule "get one penalty for debit attentions"
agenda-group "penalty-group"
    when
        $c: Client(debitAttentionCounter >= 3)
    then
        modify($c){
            setPenaltyCounter($c.getPenaltyCounter() + 1),
            setDebitAttentionCounter(0)
        }
end

rule "get one penalty for login attentions"
agenda-group "penalty-group"
    when
        $c: Client(loginAttentionCounter >= 3)
    then
        modify($c){
            setPenaltyCounter($c.getPenaltyCounter() + 1),
            setLoginAttentionCounter(0)
        }
end

//rule "suspicious client, penalty"
//    when
//        $c: Client(penaltyCounter >= 3)
//        $newDate:  LocalDateTime.now()
//    then
//        modify($c){
//            setSuspiciousDate($newDate)
//        }
//end





